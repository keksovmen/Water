class SimHandler
{
	bool	isModuleUp() – проверяет включен ли модуль
	
	bool	isModuleAlive() - проверяет в нормальном ли состоянии модуль
			требует время, чтобы определить перезагружается ли он из за
			нехватки напруги или нет, секунд 10 в худшем случаии
	
	NETWORK_CONNECTION 	isConnectedToNetwork() – узнает у модуля состояние подключения к сети
	
	bool	setDefaultParams() - настраивает сим модуль, для более удобной работы
	
	bool	connectToGPRS(const char* apn) - пытается подключится к GPRS,
			apn узнается у оператора связи, требует определенное количества времени в данный момент
			предел 5 секунд, но в документации указана максимальный отклик в 65 сек,
			можно сделать чтобы не требовал времени, те симулировать многопоточность,
			только будет 2 функции уже, одна для запроса подключения, вторая для проверки состояния
	
	bool	disconnectFromGPRS() - пытается отключится от сети GPRS, тоже требует времени
			в данный момент 5 сек предел, в документации 65 сек,
			можно вообще забить на закрытие, те просто писать модулю мол отключись,
			и уходить, а потом когда заново подключить требуется просто проверять состояние
			
	PostDataHandler<N>	sendPostRequest(const char* url, int dataLength) - 
			Метод для отправки POST сообщений на сервер,
			url - сервера
			dataLength - количество данных требуемое отправить на сервер, необходима точная цифра
			Возвращает PostDataHandler СМ НИЖЕ
			
	GetDataHandler<N>	sendGetRequest() - метод для отправки GET запросов
			Возвращает GetDataHandler СМ НИЖЕ
			
}


	Коды состояние регистрации сети
	Модуль каждый промежуток времени проверяет подключен ли к сети
	если нет то пробует
	
	Основные которые точно встречаются:
		NOT_REGISTERED_SEARCHING
		REGISTERED
		UNKNOWN - использую чисто как сообщение о том что с модулем беда

enum NETWORK_CONNECTION : int
{
	NOT_REGISTERED_NOT_SEARCING = 0, - модуль не подключен и не ищет сеть
	REGISTERED = 1, - модуль подключен к сети
	NOT_REGISTERED_SEARCHING = 2, - модуль не подключен, но ищет сеть
	DENIED = 3, - регистрация в сети отклонина
	UNKNOWN = 4, - в документации ничего не сказано
	REGISTERED_ROAMING = 5 - в документации ничего не сказано

}


	Обрабатывает http сесию, те позволяет отправить, прочитать
		узнать состояние отправки
	Является супер классом для Get и Post версий,
		те все эти функции есть и у них

class DataHandler
{
	bool	send() - посылает данные на сервер
	
	bool	isSended() - проверяет началась ли отправка данных
	
	bool	isSendedSuccessfully() - проверяет состояние сесии те
			отправились ли данные на сервер или нет,
			не требует время тк делают просто проверку
			возвращает true если сервер ответил кодом успеха 2хх серии
				
				
				Функции для передачи данных
				В GET версии это URL
				В POST версии это просто данные
				
	void	writeString(const char* str)
	void	writeChar(char c)
	void	writeInt(int val)
	
	bool readResponce() - чтение данных которые пришли как ответ
			после прочтение надо САМОМУ ОЧИЩАТЬ БУФФЕР те парсить данные,
			Возврощает true если смог прочесть данные в буфер,
			но если в буфере недостаточно места то тоже true,
			Надо сделать чтобы это был код состояния, мол прочел не прочел переполнен,
			
	FixedBuffer<N>&	getBuffer() - возврощает ссылку на буффер, 
			у буффера большая часть String методов имплементирована 
	
	void	finish() - завершает сессию, НЕ ЗАБЫВАТЬ ВЫЗВАТЬ
			те после нельзя будет читать данные
}

	
	Обрабатывает GET запросы

class GetDataHandler : public DataHandler
{
	void	write... - пишут в URL параметр
			удобно для узнавания данных от сервера
			utl/id ключа - как пример запроса
			Есть ограничения по длине, не смог отпределить какой для модуля
			но минимальный 256 байт, а максимум 8кб
}


	Обрабатывает POST запросы

class GetDataHandler : public DataHandler
{
	void	write... - пишут в тело запроса
			удобно для отправки данных на сервер
			Есть ограничения по длине, 322кб max
			но инт как указать длины только 2^16 значений но можно
			сделать long, но не думаю что так много данных надо будет отправлять			
}








ТЕКУЩИЕ ЗАДАЧИ:
1	-	Нежданные сообщения от модуля, низкое напряжение, смс, звонок и т.д.
			необходимо устранять из буффера, особенно в критические моменты,
			чтения данных с сервера и некоторые обрабатывать

2	-	До имплементировать правельное чтение данных с сервера,
			сейчас предпологается что данные 100% полностью присутствуют,
			а надо чтобы было значение сколько прочитано
			
3	-	Убрать delay(больше 50млс) из некоторых методов, пусть они лучше проверяются 
			через отдельную функцию
			
4	-	Добавить коментариев к коду, и зарефакторить